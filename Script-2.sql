--다중행 함수: 여러 행에 대해 함수가 적용되어 하나의 결과를 나타내는 함수 입니다.
SELECT SUM(SAL)
 FROM EMP;
-- 다중행 함수 종류
--SUM(), COUNT() MAX() AVG()

SELECT SUM(DISTINCT SAL),
    SUM(ALL SAL),
    SUM(SAL)
FROM EMP;
-- SUM
SELECT SUM(SAL), SUM(COMM)
FROM EMP;
-- MAX
SELECT MAX(SAL) FROM EMP;
SELECT MIN(SAL) FROM EMP;
SELECT MAX(HIREDATE)
FROM EMP
WHERE DEPTNO = 20;
-- AVG
SELECT AVG(DISTINCT SAL)
FROM EMP
WHERE DEPTNO = 30;

SELECT AVG(SAL)
FROM EMP
WHERE DEPTNO = 30;

--GROUP BY :  특정 열 또는 데이터를 기준으로 데이터를 그룹으로 묶습니다.
SELECT AVG(SAL), DEPTNO
    FROM EMP
GROUP BY DEPTNO;

--GROUP BY 절 없이 구현 
SELECT AVG(SAL)FROM EMP WHERE DEPTNO = 10;
SELECT AVG(SAL)FROM EMP WHERE DEPTNO = 20;
SELECT AVG(SAL)FROM EMP WHERE DEPTNO = 30;
-- 집합 연산자를 이용 
SELECT AVG(SAL)FROM EMP WHERE DEPTNO = 10
UNION ALL
SELECT AVG(SAL)FROM EMP WHERE DEPTNO = 20
UNION ALL
SELECT AVG(SAL)FROM EMP WHERE DEPTNO = 30;

--부서 번호 및 직책별 평균 급여로 정렬하기
SELECT AVG(SAL), ENAME, DEPTNO
    FROM EMP
GROUP BY DEPTNO

-- HAVING절 : HAVING절은 SELECT문에 GROUP BY절이 존재할 때만 사용할 수 있습니다.
-- GROUP BY절을 통해 그룹화된 결과 값의 범위를 제한하는데 사용 합니다.
--FROM → WHERE → GROUP BY → HAVING → SELECT → ORDER BY 순서로 실행 됩니다.
--HAVING절을 사용할 때 유의점 : WHERE절은 출력 대상 행을 제한하고, HAVING절은 그룹화된 대상을 출력에서 제한 합니다.
SELECT DEPTNO, JOB, AVG(SAL)
FROM EMP
GROUP BY DEPTNO, JOB
    HAVING AVG(SAL) >= 2000
ORDER BY DEPTNO, JOB;


--WHERE절과 HAVING절을 모두 사용한 경우
SELECT DEPTNO, JOB, AVG(SAL)
    FROM EMP
WHERE SAL <= 3000
GROUP BY DEPTNO, JOB
    HAVING AVG(SAL) >= 2000
ORDER BY DEPTNO, JOB;


--1 
SELECT DEPTNO, JOB, AVG(SAL)
    FROM EMP
GROUP BY DEPTNO, JOB
    HAVING AVG(SAL) >= 500
ORDER BY DEPTNO, JOB;

--2 
SELECT DEPTNO, FLOOR(AVG(SAL)),MAX(SAL) ,MIN(SAL),COUNT(EMPNO) 
FROM EMP
GROUP BY DEPTNO;

--3 
SELECT JOB , COUNT(EMPNO) 
FROM EMP
GROUP BY JOB
	HAVING COUNT(EMPNO) >= 3;

--4 
SELECT TO_CHAR(HIREDATE, 'YYYY') ,DEPTNO,COUNT(EMPNO) 
FROM EMP
GROUP BY TO_CHAR(HIREDATE, 'YYYY'), DEPTNO;

--5 
SELECT 
	CASE 
		WHEN COMM = 0 THEN 'X'
		WHEN COMM IS NULL THEN 'X'	
		ELSE 'O'
	END AS "추가수당",
	COUNT(*) AS "사원수"
FROM EMP
GROUP BY CASE 
		WHEN COMM = 0 THEN 'X'
		WHEN COMM IS NULL THEN 'X'	
		ELSE 'O'
	END
	
-- 그룹화 관련 기타 함수 : ROLLUP(그룹화 데이터의 합계를 출력 할 때 유용)
SELECT  DETPNO AS "부서번호",
	JOB AS "직책"
	COUNT(*) AS "사원수",
	MIN(SAL) AS "최소급여",
	MAX(SAL) AS "최대급여",
	ROUND(AVG(SAL) AS "평균급여"	
FROM EMP 
GROUP BY DEPTNO, JOB
ORDER BY "부서번호","직책";

SELECT  NVL(TO_CHAR(DEPTNO),'전체부서') AS "부서번호",
	NVL(TO_CHAR(JOB) ,'부서별직책') AS "직책",
	COUNT(*) AS "사원수",
	MIN(SAL) AS "최소급여",
	MAX(SAL) AS "최대급여",
	ROUND(AVG(SAL)) AS "평균급여"	
FROM EMP 
GROUP BY ROLLUP(DEPTNO, JOB)
ORDER BY "부서번호","직책";

-- 집합연산자 : 두개 이상의 쿼리 결과를 하나로 결합하는 연산자(수직처리)
-- 여러개의 SELECT 문을 하나로 연결하는 기능 
-- 집합연산자로 결합하는 결과의 컬럼은 데이터 타입이 동일해야함 
SELECT EMPNO , ENAME, SAL , DEPTNO
FROM EMP 
WHERE DEPTNO = 10 
UNION
SELECT EMPNO , ENAME, SAL , DEPTNO
FROM EMP 
WHERE DEPTNO = 20 
UNION
SELECT EMPNO , ENAME, SAL , DEPTNO
FROM EMP 
WHERE DEPTNO = 30 ;

-- 교집합 : INTERSECT 
-- 여러 개의 SQL문의 결과에 대한 교집합을 반환
SELECT EMPNO, ENAME , SAL 
FROM EMP 
WHERE SAL >1000 
INTERSECT 
SELECT EMPNO,ELNAME,SAL
FROM.EMP
WHERE SAL<2000

-- 차집합 : MINUS, 중복행에 대한 결과를 하나의 결과를 보여 주
SELECT EMPNO, ENAME ,
FROM EMP
WHERE SAL>200

-- 조인 : 여러 테이블을 하나의 테이블 처럼 사용하는 것 
-- 이때 필요한 것이 PK(Primary Key)와 테이블간 공통 값이 FOREIGN KEY
-- Inner Join(동등 조인) : 두 테이블에서 일치하는 데이터만 선택
-- Left Join : 왼쪽 테이블의 모든 데이터와 일치하는 데이터 선택 
-- Right Join : 오른쪽 모든 데이터와 일치하는 데이터 선택
-- 카테시안의 곱 : 두 개의 테이블을 조인 할 때 기준열을 지정하지 않으면, (모든 행 * 모든 행) 
SELECT *
FROM EMP ,DEPT 
ORDER BY EMPNO;

-- 등가 조인 : 일치하는 열이 존재, Inner 조인이라고 함 
SELECT ENAME,EMPNO,JOB,SAL,E.DEPTNO 
FROM EMP E , DEPT D
WHERE E.DEPTNO = D.DEPTNO;
ORDER BY EMPNO;

-- ANSI 조인
SELECT EMPNO,ENAME,JOB,SAL,E.DEPTNO
FROM EMP E JOIN DEPT D
ON E.DEPTNO  = D.DEPTNO 
ORDER BY EMPNO;

-- DEPT 테이블과 EMP 테이블은 1:N 관계를 가짐 (부서 테이블의 부서번호에는 여러명의 사원이 올수 있다.)
-- 조인에서 출력 범위 설정하기

SELECT EMPNO,ENAME,JOB,SAL,E.DEPTNO,LOC 
FROM EMP E JOIN DEPT d 
ON E.DEPTNO  = D.DEPTNO 
WHERE SAL>=3000;

SELECT*
FROM EMP E JOIN DEPT D
ON E.DEPTNO =D.DEPTNO 
WHERE E.SAL<=2500 AND E.EMPNO<9999
ORDER BY EMPNO;

-- 비등가 조인: 동일한 컬럼이 존재하지 않은 경우 조인 할 때 사용, 일반적인 방식은 아님 
SELECT  *FROM SALGRADE; -- 각 급여에 대한 등급 표시 
SELECT ENAME, SAL, GRADE 
FROM EMP E JOIN SALGRADE s 
ON SAL BETWEEN S.LOSAL AND S.HISAL ; --EMP 급여와 LOSAL ~ HISAL 비등가 조인 

-- 자체조인(SELF JOIN) : 자기 자신의 테이블 조인하는 것을 말함(같은 테이블을 두번 사용)
SELECT  E1.EMPNO, E1.ENAME,E1.MGR, 
	E2.EMPNO AS "상관 사원번호",
	E2.ENAME AS "상곤 이름"
FROM EMP E1 JOIN EMP E2 
ON E1.MGR = E2.EMPNO
ORDER BY E2.EMPNO DESC;

-- 외부조인(Outer Join) : Left,Right,Full
SELECT E.ENAME, E.DEPTNO, D.DNAME 
FROM EMP E RIGHT OUTER JOIN DEPT D 
ON E.DEPTNO = D.DEPTNO 
ORDER BY E.DEPTNO; 

SELECT E.ENAME, E.DEPTNO, D.DNAME 
FROM EMP E LEFT OUTER JOIN DEPT D 
ON E.DEPTNO = D.DEPTNO 
ORDER BY E.DEPTNO; 

-- NATURAL JOIN : 등가 조인과 비슷하지만 WHERE 조건절 없이 사용 
-- 두 테이블의 동일한 이름이 있는 열을 자동으로 찾아서 조인 해줌 
SELECT EMPNO,ENAME,DEPTNO,DNAME
FROM EMP E NATURAL JOIN DEPT D;

-- JOIN ~USING : 등가 조인을 대신하는 조인 방식 
SELECT E.EMPNO, E.ENAME, E.JOB ,DEPTNO, D.DNAME,D.LOC
FROM EMP E JOIN DEPT D USING(DEPTNO)
ORDER BY E.EMPNO;
--1
SELECT DEPTNO ,D.DNAME,EMPNO,E.ENAME,SAL
FROM EMP E  NATURAL JOIN  DEPT D 
WHERE E.SAL >2000
ORDER BY DEPTNO;
--2
SELECT DEPTNO,D.DNAME, TRUNC(AVG(SAL)), MAX(SAL), MIN(SAL) , COUNT(*)
FROM EMP E NATURAL JOIN DEPT D 
GROUP BY DEPTNO,D.DNAME;
--3
SELECT D.DEPTNO, D.DNAME, E.EMPNO,E.ENAME, JOB,SAL
FROM EMP E RIGHT OUTER JOIN DEPT D 
ON E.DEPTNO = D.DEPTNO 
ORDER BY E.DEPTNO,D.DEPTNO ;


